{"version":3,"sources":["logo.svg","component/formcomponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","validEmailRegex","RegExp","validtelNum","Forms","props","state","title","firstname","lastname","email","password","telnum","address","isValidate","errors","handleSubmit","bind","handleInputChange","event","preventDefault","target","name","value","this","length","test","setState","console","log","valid","Object","values","forEach","val","validateForm","details","isEmpty","info","error","Card","className","Form","onSubmit","noValidate","FormGroup","row","Label","htmlfor","md","Col","Input","type","onChange","id","placeholder","phoneNumber","Button","renderDetails","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"yLAAAA,EAAOC,QAAU,IAA0B,kC,yPCIrCC,G,MACJC,OAAO,2HAEDC,EAAc,QAmTPC,E,kDA1RZ,WAAYC,GAAO,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACVC,MAAQ,MACRC,UAAY,GACZC,SAAW,GACXC,MAAQ,GACRC,SAAW,GACXC,OAAQ,GACRC,QAAU,GACVC,YAAY,EACZC,OAAQ,CACLP,UAAW,GACXC,SAAW,GACXC,MAAO,GACPC,SAAU,GACVC,OAAS,GACTC,QAAU,KAIhB,EAAKG,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBAvBV,E,8DA2BAE,GACfA,EAAMC,iBADe,MAEGD,EAAME,OAAtBC,EAFa,EAEbA,KAAMC,EAFO,EAEPA,MACVR,EAASS,KAAKlB,MAAMS,OACxB,OAAQO,GACL,IAAK,YACHP,EAAOP,UACLe,EAAME,OAAS,EACX,wCACA,GACN,MAEA,IAAK,WACFV,EAAON,SACPc,EAAME,OAAS,EACb,uCACA,GACN,MAED,IAAK,QACHV,EAAOL,MACLT,EAAgByB,KAAKH,GACjB,GACA,sBACN,MAEF,IAAK,WACHR,EAAOJ,SACLY,EAAME,OAAS,EACX,sCACA,GACN,MAEA,IAAK,SACLV,EAAOH,OACLT,EAAYuB,KAAKH,IAA2B,KAAjBA,EAAME,OAC7B,GACA,2EAEN,MAEA,IAAK,UACFV,EAAOF,QACPU,EAAME,OAAS,EACb,uCACA,GAMTD,KAAKG,SAAL,aAAeZ,UAASO,EAAOC,IAAQ,WACnCK,QAAQC,IAAId,Q,mCAKPI,GAEV,GADAA,EAAMC,iBA5GW,SAACL,GACrB,IAAIe,GAAQ,EAOX,OANDC,OAAOC,OAAOjB,GAAQkB,SAEtB,SAACC,GACKA,EAAIT,OAAS,IAAGK,GAAQ,MAGtBA,EAqGFK,CAAaX,KAAKlB,MAAMS,SAlGf,SAACqB,GACb,IAAIN,GAAQ,EAOX,OANDC,OAAOC,OAAOI,GAASH,SAEvB,SAACC,GACoB,IAAfA,EAAIT,SAAcK,GAAQ,MAGxBA,EA0F8BO,CAAQb,KAAKlB,OAAQ,CACzDsB,QAAQU,KAAK,cAEbd,KAAKG,SAAS,CAACb,YADI,QAEhB,CAEFU,KAAKG,SAAS,CAACb,YADE,IAElBc,QAAQW,MAAM,mB,oCAILH,GAEX,OADAR,QAAQC,IAAIO,EAAQtB,YAChBsB,EAAQtB,WAEH,kBAAC0B,EAAA,EAAD,CAAMC,UAAU,oCACb,wDACA,yBAAKA,UAAU,OACd,yBAAKA,UAAY,+BACf,0CAEF,yBAAKA,UAAY,6BACxB,8BAAOL,EAAQ7B,MAAf,IAAuB6B,EAAQ5B,UAA/B,IAA2C4B,EAAQ3B,YAI5C,yBAAKgC,UAAU,OACf,yBAAKA,UAAY,+BACf,2CAEF,yBAAKA,UAAY,6BAChB,8BAAOL,EAAQ1B,SAIhB,yBAAK+B,UAAU,OACf,yBAAKA,UAAY,+BACf,sDAEF,yBAAKA,UAAY,6BAChB,8BAAOL,EAAQxB,UAIhB,yBAAK6B,UAAU,OACf,yBAAKA,UAAY,+BACf,6CAEF,yBAAKA,UAAY,6BAChB,8BAAOL,EAAQvB,YAQnB,gC,+BAIJ,IACCE,EAAUS,KAAKlB,MAAfS,OACP,OACG,yBAAK0B,UAAU,cACZ,yBAAKA,UAAU,iDAChB,yBAAKA,UAAU,oBACjB,kBAACD,EAAA,EAAD,CAAMC,UAAU,wCAChB,uCACA,kBAACC,EAAA,EAAD,CAAMD,UAAU,OAAOE,SAAUnB,KAAKR,aAAc4B,YAAU,GAE9D,kBAACC,EAAA,EAAD,CAAWC,KAAG,GACR,kBAACC,EAAA,EAAD,CAAOC,QAAQ,QAAQC,GAAI,GAA3B,SACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACT,kBAACE,EAAA,EAAD,CACEC,KAAK,SACL9B,KAAK,QACLC,MAAOC,KAAKlB,MAAMC,MAClB8C,SAAW7B,KAAKN,mBACb,uCACA,2CAMP,kBAAC2B,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACC,EAAA,EAAD,CAAOC,QAAQ,aAAaC,GAAI,GAAhC,cACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACT,kBAACE,EAAA,EAAD,CACEC,KAAK,OACL9B,KAAK,YACLgC,GAAG,YACHC,YAAY,aACZhC,MAASC,KAAKlB,MAAME,UACpB6C,SAAW7B,KAAKN,kBAChB0B,YAAU,IACX7B,EAAOP,UAAUiB,OAAS,GAC1B,0BAAMgB,UAAU,SAAS1B,EAAOP,aAInC,kBAACqC,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACC,EAAA,EAAD,CAAOC,QAAQ,WAAWC,GAAI,GAA9B,aACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACT,kBAACE,EAAA,EAAD,CACEC,KAAK,OACL9B,KAAK,WACLgC,GAAG,WACHC,YAAY,YACZhC,MAASC,KAAKlB,MAAMG,SACpB4C,SAAW7B,KAAKN,oBAEjBH,EAAON,SAASgB,OAAS,GACzB,0BAAMgB,UAAU,SAAS1B,EAAON,YAInC,kBAACoC,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACC,EAAA,EAAD,CAAOC,QAAQ,QAAQC,GAAI,GAA3B,SACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACT,kBAACE,EAAA,EAAD,CACEC,KAAK,QACL9B,KAAK,QACLgC,GAAG,eACHC,YAAY,gBACZhC,MAASC,KAAKlB,MAAMI,MACpB2C,SAAW7B,KAAKN,oBAEjBH,EAAOL,MAAMe,OAAS,GACtB,0BAAMgB,UAAU,SAAS1B,EAAOL,SAInC,kBAACmC,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACC,EAAA,EAAD,CAAOC,QAAQ,kBAAkBC,GAAI,GAArC,YACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACT,kBAACE,EAAA,EAAD,CACEC,KAAK,WACL9B,KAAK,WACLgC,GAAG,kBACHC,YAAY,WACZhC,MAASC,KAAKlB,MAAMK,SACpB0C,SAAW7B,KAAKN,oBAEjBH,EAAOJ,SAASc,OAAS,GACzB,0BAAMgB,UAAU,SAAS1B,EAAOJ,YAInC,kBAACkC,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACC,EAAA,EAAD,CAAOC,QAAQ,SAASC,GAAI,GAA5B,UACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACT,kBAACE,EAAA,EAAD,CACEC,KAAK,MACL9B,KAAK,SACLgC,GAAG,SACHC,YAAY,WACZhC,MAASC,KAAKlB,MAAMkD,YACpBH,SAAW7B,KAAKN,oBAEjBH,EAAOH,OAAOa,OAAS,GACvB,0BAAMgB,UAAU,SAAS1B,EAAOH,UAInC,kBAACiC,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACC,EAAA,EAAD,CAAOC,QAAQ,UAAUC,GAAI,GAA7B,WACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACT,kBAACE,EAAA,EAAD,CACEC,KAAK,WACL9B,KAAK,UACLgC,GAAG,UACHC,YAAY,UACZhC,MAASC,KAAKlB,MAAMO,QACpBwC,SAAW7B,KAAKN,oBAEjBH,EAAOF,QAAQY,OAAS,GACxB,0BAAMgB,UAAU,SAAS1B,EAAOF,WAIrC,kBAAC4C,EAAA,EAAD,kBAKJ,yBAAKhB,UAAU,eACDjB,KAAKkC,cAAclC,KAAKlB,c,GApRzBqD,a,MCfLC,MATf,WACE,OAEE,kBAACC,EAAA,EAAD,CAAWpB,UAAU,OACnB,kBAAC,EAAD,QCEcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLX,QAAQW,MAAMA,EAAMwC,c","file":"static/js/main.3bb17502.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React ,{Component}from \"react\";\r\nimport {Button, Form, FormGroup, Label, Input,Col,Container,Card, CardBody, CardTitle} from \"reactstrap\"\r\nimport './../error.css';\r\n\r\nconst validEmailRegex = \r\n  RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\r\n\r\n  const validtelNum = /^\\d+$/;\r\n\r\n  const validateForm = (errors)=>{\r\n   let valid = true;\r\n   Object.values(errors).forEach(\r\n // if we have an error string set valid to false\r\n   (val) => {\r\n      if(val.length > 0) valid = false \r\n   }\r\n    );\r\n    return valid;\r\n}\r\n\r\n   const isEmpty= (details)=>{\r\n      let valid = true;\r\n      Object.values(details).forEach(\r\n    // if we have an error string set valid to false\r\n      (val) => {\r\n         if(val.length === 0) valid = false \r\n      }\r\n       );\r\n       return valid;\r\n   }\r\nclass Forms extends Component{\r\n   \r\n   constructor(props){\r\n      super(props);\r\n\r\n      this.state = {\r\n         title : 'Mr.',\r\n         firstname : '',\r\n         lastname : '',\r\n         email : '',\r\n         password : '',\r\n         telnum :'',\r\n         address : '',\r\n         isValidate :false ,\r\n         errors: {\r\n            firstname: '',\r\n            lastname : '',\r\n            email: '',\r\n            password: '',\r\n            telnum : '',\r\n            address : ''\r\n          }\r\n      }\r\n\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n      this.handleInputChange = this.handleInputChange.bind(this);\r\n      //this.validateForm = this.validateForm.bind(this);\r\n   }\r\n   \r\n   handleInputChange(event){\r\n      event.preventDefault();\r\n      const { name, value } = event.target;\r\n      let errors = this.state.errors;\r\n      switch (name) {\r\n         case 'firstname': \r\n           errors.firstname = \r\n             value.length < 2\r\n               ? 'First Name must be 2 characters long!'\r\n               : '';\r\n           break;\r\n\r\n           case 'lastname':\r\n              errors.lastname =\r\n              value.length < 2\r\n              ? 'Last Name must be 2 characters long!'\r\n              : '';\r\n          break;\r\n\r\n         case 'email': \r\n           errors.email = \r\n             validEmailRegex.test(value)\r\n               ? ''\r\n               : 'Email is not valid!';\r\n           break;\r\n\r\n         case 'password': \r\n           errors.password = \r\n             value.length < 8\r\n               ? 'Password must be 8 characters long!'\r\n               : '';\r\n           break;\r\n\r\n           case 'telnum': \r\n           errors.telnum = \r\n             validtelNum.test(value) && value.length === 10\r\n               ? ''\r\n               : 'Telephone number must be contains number only and should be of length 10'\r\n                ;\r\n           break;\r\n\r\n           case 'address':\r\n              errors.address =\r\n              value.length < 2\r\n              ? 'Last Name must be 2 characters long!'\r\n              : '';\r\n          break;\r\n         default:\r\n           break;\r\n       }\r\n     \r\n       this.setState({errors, [name]: value}, ()=> {\r\n           console.log(errors)\r\n       })\r\n   }\r\n   \r\n\r\n   handleSubmit(event){\r\n      event.preventDefault();\r\n      if(validateForm(this.state.errors) && isEmpty(this.state)) {\r\n        console.info('Valid Form')\r\n        const isValidate = true;\r\n        this.setState({isValidate})\r\n      }else{\r\n         const isValidate=false;\r\n         this.setState({isValidate})\r\n        console.error('Invalid Form')\r\n      }\r\n   }\r\n\r\n   renderDetails(details){\r\n      console.log(details.isValidate);\r\n      if (details.isValidate)\r\n            return(\r\n               <Card className='shadow p-3 mb-5 bg-white rounded'>\r\n                  <h3> Your entered details : </h3>\r\n                  <div className=\"row\">\r\n                   <div className = 'col-12 col-sm-4 text-center'>\r\n                     <span>Name : </span>\r\n                   </div>\r\n                   <div className = 'col-12 col-sm-8 text-left' >\r\n            <span>{details.title} {details.firstname} {details.lastname}</span>\r\n                   </div>\r\n                   </div>\r\n\r\n                   <div className=\"row\">\r\n                   <div className = 'col-12 col-sm-4 text-center'>\r\n                     <span>Email : </span>\r\n                   </div>\r\n                   <div className = 'col-12 col-sm-8 text-left'>\r\n                    <span>{details.email}</span>\r\n                   </div>\r\n                   </div>\r\n\r\n                   <div className=\"row\">\r\n                   <div className = 'col-12 col-sm-4 text-center'>\r\n                     <span>Telephone Number : </span>\r\n                   </div>\r\n                   <div className = 'col-12 col-sm-8 text-left'>\r\n                    <span>{details.telnum}</span>\r\n                   </div>\r\n                   </div>\r\n\r\n                   <div className=\"row\">\r\n                   <div className = 'col-12 col-sm-4 text-center'>\r\n                     <span>Address : </span>\r\n                   </div>\r\n                   <div className = 'col-12 col-sm-8 text-left'>\r\n                    <span>{details.address}</span>\r\n                   </div>\r\n                   </div>\r\n\r\n               </Card>\r\n            );\r\n        else\r\n            return(\r\n                <div></div>\r\n            );\r\n   }\r\n\r\n   render(){\r\n      const {errors} = this.state;\r\n      return(\r\n         <div className=\"container \">\r\n            <div className=\"row justify-content-center align-items-center\">\r\n           <div className=\"col-12 mb-3 mt-5\">\r\n         <Card className='shadow-lg p-3 mb-5 bg-white rounded '>\r\n         <h2>Details</h2>\r\n         <Form className=\"form\" onSubmit={this.handleSubmit} noValidate>\r\n\r\n         <FormGroup row>\r\n               <Label htmlfor=\"Title\" md={2} >Title</Label>\r\n               <Col md={3}>\r\n               <Input\r\n                 type=\"select\"\r\n                 name=\"title\"\r\n                 value={this.state.title}\r\n                 onChange= {this.handleInputChange}>\r\n                    <option>Mr.</option>\r\n                    <option>Mrs.</option>\r\n               </Input>\r\n               \r\n               </Col>\r\n             </FormGroup>\r\n\r\n             <FormGroup row>\r\n               <Label htmlfor=\"firstname \" md={2} >First Name</Label>\r\n               <Col md={4}>\r\n               <Input\r\n                 type=\"text\"\r\n                 name=\"firstname\"\r\n                 id=\"firstname\"\r\n                 placeholder=\"First Name\"\r\n                 value = {this.state.firstname}\r\n                 onChange= {this.handleInputChange}\r\n                 noValidate />\r\n               {errors.firstname.length > 0 && \r\n                <span className='error'>{errors.firstname}</span>}\r\n               </Col>\r\n             </FormGroup>\r\n\r\n             <FormGroup row>\r\n               <Label htmlfor=\"lastname\" md={2}>Last Name</Label>\r\n               <Col md={4}>\r\n               <Input\r\n                 type=\"text\"\r\n                 name=\"lastname\"\r\n                 id=\"lastname\"\r\n                 placeholder=\"Last Name\"\r\n                 value = {this.state.lastname}\r\n                 onChange= {this.handleInputChange}\r\n               />\r\n               {errors.lastname.length > 0 && \r\n                <span className='error'>{errors.lastname}</span>}\r\n               </Col>\r\n             </FormGroup>\r\n\r\n             <FormGroup row>\r\n               <Label htmlfor=\"email\" md={2}>Email</Label>\r\n               <Col md={4}>\r\n               <Input\r\n                 type=\"email\"\r\n                 name=\"email\"\r\n                 id=\"exampleemail\"\r\n                 placeholder=\"xyz@email.com\"\r\n                 value = {this.state.email}\r\n                 onChange= {this.handleInputChange}\r\n               />\r\n               {errors.email.length > 0 && \r\n                <span className='error'>{errors.email}</span>}\r\n               </Col>\r\n             </FormGroup>\r\n\r\n             <FormGroup row>\r\n               <Label htmlfor=\"examplepassword\" md={2}>Password</Label>\r\n               <Col md={4}>\r\n               <Input\r\n                 type=\"password\"\r\n                 name=\"password\"\r\n                 id=\"examplePassword\"\r\n                 placeholder=\"********\"\r\n                 value = {this.state.password}\r\n                 onChange= {this.handleInputChange}\r\n               />\r\n               {errors.password.length > 0 && \r\n                <span className='error'>{errors.password}</span>}\r\n               </Col>\r\n             </FormGroup>\r\n\r\n             <FormGroup row>\r\n               <Label htmlfor=\"telnum\" md={2}>Number</Label>\r\n               <Col md={4}>\r\n               <Input\r\n                 type=\"tel\"\r\n                 name=\"telnum\"\r\n                 id=\"telnum\"\r\n                 placeholder=\"Tel. Num\"\r\n                 value = {this.state.phoneNumber}\r\n                 onChange= {this.handleInputChange}\r\n               />\r\n               {errors.telnum.length > 0 && \r\n                <span className='error'>{errors.telnum}</span>}\r\n               </Col>\r\n             </FormGroup>\r\n\r\n             <FormGroup row>\r\n               <Label htmlfor=\"Address\" md={2}>Address</Label>\r\n               <Col md={4}>\r\n               <Input\r\n                 type=\"textarea\"\r\n                 name=\"address\"\r\n                 id=\"address\"\r\n                 placeholder=\"Address\"\r\n                 value = {this.state.address}\r\n                 onChange= {this.handleInputChange}\r\n               />\r\n               {errors.address.length > 0 && \r\n                <span className='error'>{errors.address}</span>}\r\n               </Col>\r\n             </FormGroup>\r\n           \r\n           <Button>Submit</Button>\r\n         </Form>\r\n       \r\n       </Card>\r\n       </div>\r\n       <div className=\"col-12 mb-3\">\r\n                    {this.renderDetails(this.state)}\r\n       </div>\r\n       </div>\r\n       </div>\r\n       \r\n     );\r\n   }\r\n}\r\nexport default Forms;","import React from 'react';\nimport logo from './logo.svg';\nimport {Container} from \"reactstrap\"\nimport Forms from './component/formcomponent'\nimport './App.css';\n\nfunction App() {\n  return (\n    \n    <Container className=\"App\">\n      <Forms/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}